#include <iostream>
#include <assert.h>
using namespace std;
#include "Status.h"
#include "SqList.h"

//用于顺序表元素的输出
template <class DataType>
void Display(const DataType & e) 
{    cout << e << "  ";    }

//测试主函数
int main(void)
{
	SqList<int> list(11);
	int num,min,dx;
	cout << "Please enter 11 integers(6 32 3 11 11 11 41 26 11 5 22):" << endl;//输入：6 32 3 11 11 11 41 26 11 5 22
	for(int i=1; i<=11; i++)
	{
		cin >> num;
		list.InsertElem(i, num);
	}

	//-------以下用于测试第1小题-------------------------
	min = DelMinElem(list);//------对第1小题函数的调用
	cout << "The current min value is: " << min << endl;
	cout << "After deleting the min value, the list is: " << endl;
	list.Traverse(Display);
	cout << endl;
	min = DelMinElem(list);//------对第1小题函数的调用
	cout << "The current min value is: " << min << endl;
	cout << "After deleting the min value, the list is:" << endl;
	list.Traverse(Display);
	cout << endl;
	min = DelMinElem(list);//------对第1小题函数的调用
	cout << "The current min value is: " << min << endl;
	cout << "After deleting the min value, the list is:" << endl;
	list.Traverse(Display);
	cout << endl << endl;

	//-------以下用于测试第2小题-------------------------
	cout << "Please enter an integer to be deleted(22): " << endl;//输入：22
	cin >> dx;
	if(list.LocateElem(dx))
	{
		DelValue(list,dx);//------对第2小题函数的调用
		cout << "The deleted list is:" << endl;
		list.Traverse(Display);
		cout << endl << endl;
	}
	else
		cout << "Not found!" << endl;
	cout << "Please enter an integer to be deleted(26): " << endl;//输入：26
	cin >> dx;
	if (list.LocateElem(dx))
	{
		DelValue(list, dx);//------对第2小题函数的调用
		cout << "The deleted list is:" << endl;
		list.Traverse(Display);
		cout << endl << endl;
	}
	else
		cout << "Not found!" << endl;
	cout << "Please enter an integer to be deleted(11): " << endl;//输入：11
	cin >> dx;
	if(list.LocateElem(dx))
	{
		DelValue(list,dx);//------对第2小题函数的调用
		cout << "The deleted list is:" << endl;
		list.Traverse(Display);
		cout << endl << endl;
	}
	else
		cout << "Not found!" << endl << endl;

	//--------------以下用于测试第3小题--------------------------------------------
	list.GetElem(1,num);	list.InsertElem(list.GetLength() + 1,num);	list.InsertElem(list.GetLength() + 1, num);
	list.GetElem(2,num);	list.InsertElem(list.GetLength() + 1, num);
	list.GetElem(3,num);	list.InsertElem(2,num);	list.InsertElem(list.GetLength() + 1, num);
	cout << "The current list is:" << endl;
	list.Traverse(Display);
	cout << endl;
	DelRepElem(list);//------对第3小题函数的调用
	cout << "After deleting duplicate elements, the list is:" << endl;
	list.Traverse(Display);
	cout << endl << endl;

	system("pause");
	return 0;
}